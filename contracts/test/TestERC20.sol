// SPDX-License-Identifier: Apache-2.0

pragma solidity ^0.7.0;


import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";

contract TestERC20 is ERC20Upgradeable {

    function initialize(string memory name_, string memory symbol_, uint8 decimals_) external initializer {
        __TestERC20_init(name_, symbol_, decimals_);
    }

    function __TestERC20_init(string memory name_, string memory symbol_, uint8 decimals_) internal initializer {
        __Context_init_unchained();
        __ERC20_init_unchained(name_, symbol_);
        __TestERC20_init_unchained(decimals_);
    }

    function __TestERC20_init_unchained(uint8 decimals) internal initializer {
        _setupDecimals(decimals);
    }

    /**
    * @notice Allows minting of this token
    * @param amount Amount to  mint
    */
    function mint(uint256 amount) external returns (bool) {
        _mint(_msgSender(), amount);
        return true;
    }

    /**
    * @notice Allows minting of this token
    * @param account Receiver ot minted tokens
    * @param amount Amount to  mint
    */
    function mint(address account, uint256 amount) external returns (bool) {
        _mint(account, amount);
        return true;
    }

    /**
    * @notice Allows minting of this token
    * @param account Receiver ot minted tokens
    * @param amount Amount to  mint
    */
    function allocateTo(address account, uint256 amount) external {
        _mint(account, amount);
    } 
}
